services:
  frontend:
    container_name: frontend
    build: 
      context: "./frontend"
    volumes:
      - './frontend:/app'
      - '/app/node_modules'
    ports:
      - "3000:3000"
    environment:
      CHOKIDAR_USEPOLLING: "true"
    depends_on:
      - backend
      - minio
  backend:
    container_name: backend
    build:
      context: "./backend"
      target: "dev"
    volumes:
      - "./backend:/code"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: "service_healthy"
  postgres:
    container_name: database
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_ROOT_PASSWORD=postgres
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - "5433:5432"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  minio:
    container_name: minio
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniominio
    command: server --console-address ":9001" /data
  nginx:
    container_name: nginx
    depends_on:
      - backend
      - frontend
    restart: always
    volumes:
      - "./nginx/:/etc/nginx/conf.d/"
    build:
      dockerfile: Dockerfile
      context: ./nginx
    ports:
      - "8080:80"

volumes:
  minio_storage: {}

